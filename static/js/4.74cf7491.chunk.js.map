{"version":3,"sources":["__data__/selectors/bonds.js","components/BondsTable/BondRow.jsx","components/BondsTable/BondsTable.jsx"],"names":["selectBondsIsLoading","state","bonds","isLoading","selectBondsIsLoaded","isLoaded","selectBondsIsError","error","selectBondsData","data","localeParams","style","currency","formattedValue","value","toLocaleString","bond","index","title","key","price","nkd","fullPrice","couponValue","format","nextCoupon","couponInterval","couponsLeft","profit","class","yearProfit","toFixed","formatDistanceToNow","matDate","locale","ruLocale","duration","BondsTable","useState","filterValue","setFilterValue","bondsData","useSelector","dispatch","useDispatch","onRefresh","useCallback","fetchBonds","Alert","margin","variant","message","Loader","className","padding","Button","onClick","Card","body","Form","width","Label","Control","size","type","placeholder","onChange","event","target","Table","striped","bordered","hover","filter","trim","toLowerCase","includes","sort","a","b","daysTillEnd","map","BondRow"],"mappings":"yKAAaA,EAAuB,SAACC,GAAD,OAAWA,EAAMC,MAAMC,WAC9CC,EAAsB,SAACH,GAAD,OAAWA,EAAMC,MAAMG,UAC7CC,EAAqB,SAACL,GAAD,OAAWA,EAAMC,MAAMK,OAC5CC,EAAkB,SAACP,GAAD,OAAWA,EAAMC,MAAMO,M,+BCChDC,EAAe,CAAEC,MAAO,WAAYC,SAAU,OAE9CC,EAAiB,SAACC,GAAD,OAAWA,EAAMC,eAAe,QAASL,IAEjD,kBAAGM,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACP,+BACI,6BAAKA,EAAQ,IACb,+BACI,4BAAG,4BAAID,EAAKE,UACZ,gCAAQF,EAAKG,SAEjB,6BAAKH,EAAKI,QACV,6BAAKP,EAAeG,EAAKK,OACzB,6BAAKR,EAAeG,EAAKM,aACzB,6BAAKT,EAAeG,EAAKO,eACzB,6BAAKV,EAAkC,IAAnBG,EAAKO,eACzB,6BAAKC,YAAOR,EAAKS,WAAY,cAC7B,6BAAKT,EAAKU,iBACV,6BAAKV,EAAKW,cACV,6BAAKd,EAAeG,EAAKY,UACzB,oBAAIC,MAAM,eAAV,SAAyB,uCAA0B,IAAlBb,EAAKc,YAAkBC,QAAQ,GAAvC,SACzB,6BAAKC,YAAoBhB,EAAKiB,QAAS,CAAEC,OAAQC,QACjD,6BAAKX,YAAOR,EAAKiB,QAAS,cAC1B,6BAAKjB,EAAKoB,e,gBC+DPC,UA7EI,WAAO,IAAD,EACeC,mBAAS,IADxB,mBAChBC,EADgB,KACHC,EADG,KAEjBC,EAAYC,YAAYlC,GACxBL,EAAYuC,YAAY1C,GACxBK,EAAWqC,YAAYtC,GACvBG,EAAQmC,YAAYpC,GACpBqC,EAAWC,cACXC,EAAYC,uBAAY,WAC5BH,EAASI,iBACR,IACH,GAAIxC,EACF,OAAO,cAACyC,EAAA,EAAD,CAAOrC,MAAO,CAAEsC,OAAQ,QAAUC,QAAS,SAA3C,SACF3C,EAAM4C,SAAW,4GAaxB,OACI,qCACChD,GAAa,cAACiD,EAAA,EAAD,IACT/C,GACE,qCACD,qBAAKgD,UAAW,8BAA+B1C,MAAO,CAAE2C,QAAS,QAAjE,SACE,cAACC,EAAA,EAAD,CAAQL,QAAQ,UAAUM,QAASX,EAAnC,gEAEF,eAACY,EAAA,EAAD,CAAMC,MAAI,EAAV,UACE,gLACF,iMACA,kZAEA,eAACC,EAAA,EAAD,CAAMhD,MAAO,CAAEsC,OAAQ,OAAQW,MAAO,SAAtC,UACE,cAACD,EAAA,EAAKE,MAAN,mDACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,KAAKC,KAAK,OAAOC,YAAY,mDAAWC,SAxB7C,SAACC,GACzB3B,EAAe2B,EAAMC,OAAOtD,QAuBsEA,MAAOyB,UAG/F,eAAC8B,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACT,KAAK,KAAKV,UAAW,cAAnD,UACI,gCACA,+BACI,mCACA,kFACA,0DACA,oDACA,+FACA,gEACA,wFACA,yFACA,kFACA,4EACA,gGACA,uDACA,qGACA,wFACA,iFAGJ,gCAEIZ,EACGgC,QA9CJ,SAACzD,GAAD,OAAWuB,EAAYmC,QACtC1D,EAAKE,MAAMyD,cAAcC,SAASrC,EAAYoC,kBA8C3BE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,YAAcD,EAAEC,YAAc,GAAK,KACrDC,KAAI,SAACjE,EAAMC,GAAP,OAAiB,cAACiE,EAAD,CAAwBjE,MAAOA,EAAOD,KAAMA,GAA9BA,EAAKG","file":"static/js/4.74cf7491.chunk.js","sourcesContent":["export const selectBondsIsLoading = (state) => state.bonds.isLoading;\nexport const selectBondsIsLoaded = (state) => state.bonds.isLoaded;\nexport const selectBondsIsError = (state) => state.bonds.error;\nexport const selectBondsData = (state) => state.bonds.data;\n","import React from 'react';\nimport { format, formatDistanceToNow } from 'date-fns';\nimport ruLocale from 'date-fns/locale/ru';\n\nconst localeParams = { style: 'currency', currency: 'RUB' };\n\nconst formattedValue = (value) => value.toLocaleString('ru-RU', localeParams);\n\nexport default ({ bond, index }) => (\n        <tr>\n            <td>{index + 1}</td>\n            <td>\n                <p><b>{bond.title}</b></p>\n                <small>{bond.key}</small>\n            </td>\n            <td>{bond.price}</td>\n            <td>{formattedValue(bond.nkd)}</td>\n            <td>{formattedValue(bond.fullPrice)}</td>\n            <td>{formattedValue(bond.couponValue)}</td>\n            <td>{formattedValue(bond.couponValue * 0.87)}</td>\n            <td>{format(bond.nextCoupon, 'dd.MM.yy')}</td>\n            <td>{bond.couponInterval}</td>\n            <td>{bond.couponsLeft}</td>\n            <td>{formattedValue(bond.profit)}</td>\n            <td class=\"text-primary\"><b>{`${(bond.yearProfit * 100).toFixed(2)}%`}</b></td>\n            <td>{formatDistanceToNow(bond.matDate, { locale: ruLocale })}</td>\n            <td>{format(bond.matDate, 'dd.MM.yy')}</td>\n            <td>{bond.duration}</td>\n        </tr>\n);\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Table from 'react-bootstrap/Table';\nimport {\n  Alert, Button, Card, Form,\n} from 'react-bootstrap';\nimport {\n  selectBondsData, selectBondsIsError, selectBondsIsLoaded, selectBondsIsLoading,\n} from '../../__data__/selectors';\nimport BondRow from './BondRow.jsx';\nimport Loader from '../Loader/Loader.jsx';\nimport { fetchBonds } from '../../__data__/actions';\n\nconst BondsTable = () => {\n  const [filterValue, setFilterValue] = useState('');\n  const bondsData = useSelector(selectBondsData);\n  const isLoading = useSelector(selectBondsIsLoading);\n  const isLoaded = useSelector(selectBondsIsLoaded);\n  const error = useSelector(selectBondsIsError);\n  const dispatch = useDispatch();\n  const onRefresh = useCallback(() => {\n    dispatch(fetchBonds());\n  }, []);\n  if (error) {\n    return <Alert style={{ margin: '40px' }} variant={'danger'}>\n        {error.message || 'Неизвестная ошибка'}\n      </Alert>;\n  }\n\n  const filterInputHandle = (event) => {\n    setFilterValue(event.target.value);\n  };\n\n  const filterName = (bond) => (filterValue.trim()\n    ? bond.title.toLowerCase().includes(filterValue.toLowerCase())\n    : true\n  );\n\n  return (\n      <>\n      {isLoading && <Loader />}\n          {isLoaded\n          && <>\n            <div className={'container-fluid text-center'} style={{ padding: '30px' }}>\n              <Button variant=\"primary\" onClick={onRefresh}>Обновить</Button>\n            </div>\n            <Card body>\n              <h3>Облигации уровня листинга 1</h3>\n            <p>Полная цена = цена + НКД + комиссия</p>\n            <p>Доход нетто /суммарный доход на 1 шт/\n              = (купоны - НДФЛ) * шт + номинал - полная цена</p>\n            <Form style={{ margin: '30px', width: '200px' }}>\n              <Form.Label>Фильтр</Form.Label>\n              <Form.Control size=\"sm\" type=\"text\" placeholder=\"Название\" onChange={filterInputHandle} value={filterValue} />\n            </Form>\n            </Card>\n              <Table striped bordered hover size=\"sm\" className={'text-center'}>\n                  <thead>\n                  <tr>\n                      <th>#</th>\n                      <th>Название</th>\n                      <th>Цена</th>\n                      <th>НКД</th>\n                      <th>Полная цена</th>\n                      <th>Купон</th>\n                      <th>КупонНДФЛ</th>\n                      <th>След.купон</th>\n                      <th>Интервал</th>\n                      <th>Купонов</th>\n                      <th>Доход, нетто</th>\n                      <th>% год.</th>\n                      <th>До погашения</th>\n                      <th>Погашение</th>\n                      <th>Дюрация</th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {\n                      bondsData\n                        .filter(filterName)\n                        .sort((a, b) => (a.daysTillEnd > b.daysTillEnd ? 1 : -1))\n                        .map((bond, index) => <BondRow key={bond.key} index={index} bond={bond}/>)\n                  }\n                  </tbody>\n              </Table>\n          </>}\n      </>\n  );\n};\n\nexport default BondsTable;\n"],"sourceRoot":""}